// 1. IMPORTAÇÕES
import './style.css';
import { auth, db } from './firebase.js';
import { onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "firebase/auth";
import { doc, setDoc, increment } from "firebase/firestore";

// 2. INJEÇÃO DO HTML PRINCIPAL
document.querySelector('#app').innerHTML = `
  <!-- TELA DE AUTENTICAÇÃO -->
  <div id="auth-screen">
    <div class="min-h-screen flex flex-col items-center justify-center bg-bkg p-4">
      <div class="w-full max-w-md p-8 space-y-6 bg-surface rounded-xl shadow-2xl border border-border">
        <div>
          <h2 id="auth-title" class="text-center text-3xl font-extrabold text-secondary">Acesse sua Conta</h2>
          <p id="auth-prompt" class="mt-2 text-center text-sm text-subtle"></p>
        </div>
        <form id="auth-form" class="space-y-6">
          <input type="email" id="auth-email" placeholder="Email" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md shadow-sm focus:ring-primary focus:border-primary placeholder-subtle">
          <div class="relative">
            <input type="password" id="auth-password" placeholder="Senha" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md shadow-sm focus:ring-primary focus:border-primary placeholder-subtle pr-12 appearance-none">
            <button type="button" id="toggle-password-btn" class="absolute inset-y-0 right-0 px-4 flex items-center text-subtle hover:text-primary focus:outline-none rounded-r-md">
              <svg class="w-5 h-5 eye-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
              <svg class="w-5 h-5 eye-slash-icon hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.243 4.243L6.228 6.228" /></svg>
            </button>
          </div>
          <button id="auth-submit-btn" type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-bold text-bkg bg-primary hover:opacity-90 transition-opacity focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-surface focus:ring-primary">
            Entrar
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- CONTAINER PRINCIPAL DO APP -->
  <div id="app-container" class="hidden">
    <header class="bg-surface shadow-md border-b border-border">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <h1 class="text-2xl font-bold text-secondary">Meu Planner</h1>
          <div class="flex items-center">
            <button id="theme-toggle-btn" class="mr-4 p-2 rounded-full text-subtle hover:text-secondary hover:bg-surface">
              <svg id="theme-sun-icon" class="w-5 h-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" /></svg>
              <svg id="theme-moon-icon" class="w-5 h-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /></svg>
            </button>
            <span id="user-email" class="text-sm text-subtle mr-4"></span>
            <button id="logout-btn" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg shadow-md hover:opacity-90 transition-opacity">Sair</button>
          </div>
        </div>
      </div>
    </header>

    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- TELA 1: LISTA DE MATRÍCULAS -->
      <div id="enrollments-view">
        <div class="px-4 py-6 sm:px-0">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-3xl font-bold text-secondary">Minhas Matrículas</h2>
            <button id="add-enrollment-btn" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg shadow-md hover:opacity-90 transition-opacity">
              + Adicionar Matrícula
            </button>
          </div>
          <div id="enrollments-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
        </div>
      </div>

      <!-- TELA 2: PAINEL DA MATRÍCULA (AGORA É O DASHBOARD DO PERÍODO) -->
      <div id="dashboard-view" class="hidden">
        <div class="px-4 py-6 sm:px-0">
            <div class="md:flex justify-between items-center mb-6 space-y-4 md:space-y-0">
                <div>
                    <button id="back-to-enrollments-btn" class="text-sm text-primary hover:opacity-80 flex items-center mb-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>
                        Trocar Matrícula
                    </button>
                    <h2 id="dashboard-title" class="text-3xl font-bold text-secondary"></h2>
                    <p id="dashboard-subtitle" class="text-subtle mt-1"></p>
                </div>
                <div class="flex items-center space-x-4">
                    <select id="period-switcher" class="bg-surface border border-border text-secondary rounded-md px-3 py-2 focus:ring-primary focus:border-primary"></select>
                    <button id="new-period-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-90">Novo Período</button>
                </div>
            </div>
          
          <div class="mt-8 border-t border-border pt-8">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-2xl font-bold text-secondary">Disciplinas do Período</h3>
              <button id="add-discipline-btn" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg shadow-md hover:opacity-90 transition-opacity">
                + Adicionar Disciplina
              </button>
            </div>
            <div id="disciplines-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
          </div>
        </div>
      </div>
    </main>
  </div>
`;

// 3. INJEÇÃO DOS MODAIS
const modalHTML = `
  <div id="add-enrollment-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-md border border-border">
      <h3 id="enrollment-modal-title" class="text-2xl font-bold mb-6 text-secondary">Nova Matrícula</h3>
      <form id="add-enrollment-form">
        <div class="space-y-4">
          <input type="text" id="enrollment-course" placeholder="Nome do Curso (ex: Ciência da Computação)" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <input type="text" id="enrollment-institution" placeholder="Instituição de Ensino" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
        </div>
        <div class="mt-8 flex justify-end space-x-4">
          <button type="button" id="cancel-enrollment-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Cancelar</button>
          <button type="submit" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-90">Salvar</button>
        </div>
      </form>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', modalHTML);

const confirmModalHTML = `
  <div id="confirm-delete-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-sm border border-border">
      <h3 class="text-xl font-bold text-secondary">Confirmar Exclusão</h3>
      <p id="confirm-delete-message" class="text-subtle mt-2">Tem certeza que deseja excluir? Esta ação não pode ser desfeita.</p>
      <div class="mt-6 flex justify-end space-x-4">
        <button id="cancel-delete-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Cancelar</button>
        <button id="confirm-delete-btn" class="bg-danger text-white font-semibold py-2 px-4 rounded-lg hover:opacity-90">Excluir</button>
      </div>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', confirmModalHTML);

const disciplineModalHTML = `
  <div id="add-discipline-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-md border border-border">
      <h3 id="discipline-modal-title" class="text-2xl font-bold mb-6 text-secondary">Nova Disciplina</h3>
      <form id="add-discipline-form">
        <div class="space-y-4">
          <input type="text" id="discipline-name" placeholder="Nome da Disciplina" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <input type="text" id="discipline-code" placeholder="Código (opcional)" class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <input type="text" id="discipline-teacher" placeholder="Professor(a) (opcional)" class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <input type="text" id="discipline-location" placeholder="Local (sala, prédio, etc.)" class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <input type="text" id="discipline-schedule" placeholder="Horários (ex: Seg 10-12h, Qua 10-12h)" class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          <div class="flex items-center space-x-4">
            <input type="number" id="discipline-workload" placeholder="C.H. Total (horas)" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
            <input type="number" id="discipline-hours-per-class" placeholder="Horas por aula" value="2" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          </div>
        </div>
        <div class="mt-8 flex justify-end space-x-4">
          <button type="button" id="cancel-discipline-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Cancelar</button>
          <button type="submit" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-90">Salvar</button>
        </div>
      </form>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', disciplineModalHTML);

const absenceModalHTML = `
  <div id="add-absence-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-md border border-border">
      <h3 class="text-2xl font-bold mb-6 text-secondary">Registrar Falta</h3>
      <form id="add-absence-form">
        <div class="space-y-4">
          <div>
            <label for="absence-date" class="block text-sm font-medium text-subtle mb-1">Data da Falta</label>
            <input type="date" id="absence-date" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
          </div>
          <div>
            <label for="absence-justification" class="block text-sm font-medium text-subtle mb-1">Justificativa (opcional)</label>
            <textarea id="absence-justification" placeholder="Ex: Consulta médica" rows="3" class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary"></textarea>
          </div>
        </div>
        <div class="mt-8 flex justify-end space-x-4">
          <button type="button" id="cancel-absence-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Cancelar</button>
          <button type="submit" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-90">Salvar Falta</button>
        </div>
      </form>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', absenceModalHTML);

const absenceHistoryModalHTML = `
  <div id="absence-history-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-lg border border-border flex flex-col" style="max-height: 90vh;">
      <h3 id="absence-history-title" class="text-2xl font-bold mb-4 text-secondary">Histórico de Faltas</h3>
      <div id="absence-history-list" class="flex-grow overflow-y-auto pr-4 -mr-4">
        <!-- Lista de faltas será renderizada aqui -->
      </div>
      <button type="button" id="close-absence-history-btn" class="mt-6 w-full bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Fechar</button>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', absenceHistoryModalHTML);

const periodModalHTML = `
  <div id="add-period-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-md border border-border">
      <h3 class="text-2xl font-bold mb-6 text-secondary">Novo Período Letivo</h3>
      <form id="add-period-form">
        <div class="space-y-4">
          <input type="text" id="period-name" placeholder="Nome do Período (ex: 2025.2)" required class="w-full px-4 py-3 bg-bkg text-secondary border border-border rounded-md focus:ring-primary focus:border-primary">
        </div>
        <div class="mt-8 flex justify-end space-x-4">
          <button type="button" id="cancel-period-btn" class="bg-subtle text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-80">Cancelar</button>
          <button type="submit" class="bg-primary text-bkg font-semibold py-2 px-4 rounded-lg hover:opacity-90">Criar Período</button>
        </div>
      </form>
    </div>
  </div>
`;
document.querySelector('#app').insertAdjacentHTML('beforeend', periodModalHTML);


// =================================================================
//          INÍCIO DO BLOCO DE CÓDIGO ORGANIZADO
// =================================================================

// 4. SELEÇÃO DE ELEMENTOS (APENAS OS QUE EXISTEM NO INÍCIO)
const authScreen = document.getElementById('auth-screen');
const appContainer = document.getElementById('app-container');
const authForm = document.getElementById('auth-form');
const authTitle = document.getElementById('auth-title');
const authPrompt = document.getElementById('auth-prompt');
const authSubmitBtn = document.getElementById('auth-submit-btn');
const togglePasswordBtn = document.getElementById('toggle-password-btn');
const passwordInput = document.getElementById('auth-password');
const eyeIcon = togglePasswordBtn.querySelector('.eye-icon');
const eyeSlashIcon = togglePasswordBtn.querySelector('.eye-slash-icon');

// 5. VARIÁVEIS DE ESTADO
let authMode = 'login';
let sortable = null;
let editingEnrollmentId = null;
let editingDisciplineId = null;
let itemToDelete = null;
let disciplineSortable = null;
let currentDisciplineForAbsence = null;
let activeEnrollmentId = null;
let activePeriodId = null;
let appListenersInitialized = false; // Flag para garantir que os listeners sejam adicionados apenas uma vez

// 6. FUNÇÕES

// --- Funções de Tema ---
const applyTheme = (theme) => {
    const sunIcon = document.getElementById('theme-sun-icon');
    const moonIcon = document.getElementById('theme-moon-icon');
    if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        if(sunIcon) sunIcon.classList.remove('hidden');
        if(moonIcon) moonIcon.classList.add('hidden');
    } else {
        document.documentElement.classList.remove('dark');
        if(sunIcon) sunIcon.classList.add('hidden');
        if(moonIcon) moonIcon.classList.remove('hidden');
    }
};

// --- Funções de Autenticação ---
function updateAuthView() {
    if (authMode === 'login') {
        authTitle.textContent = 'Acesse sua Conta';
        authSubmitBtn.textContent = 'Entrar';
        authPrompt.innerHTML = 'Ou <button id="switch-to-signup-btn" type="button" class="font-medium text-primary hover:opacity-80">crie uma nova conta</button>';
        document.getElementById('switch-to-signup-btn').addEventListener('click', () => { authMode = 'signup'; updateAuthView(); });
    } else {
        authTitle.textContent = 'Crie sua Conta';
        authSubmitBtn.textContent = 'Criar Conta';
        authPrompt.innerHTML = 'Já tem uma conta? <button id="switch-to-login-btn" type="button" class="font-medium text-primary hover:opacity-80">Faça o login</button>';
        document.getElementById('switch-to-login-btn').addEventListener('click', () => { authMode = 'login'; updateAuthView(); });
    }
}

// --- Funções de Navegação e Renderização ---
async function showDashboard(enrollmentId) {
    const enrollmentsView = document.getElementById('enrollments-view');
    const dashboardView = document.getElementById('dashboard-view');
    enrollmentsView.classList.add('hidden');
    dashboardView.classList.remove('hidden');
    activeEnrollmentId = enrollmentId;

    const { doc, getDoc } = await import('firebase/firestore');
    const enrollmentRef = doc(db, 'users', auth.currentUser.uid, 'enrollments', enrollmentId);
    const enrollmentSnap = await getDoc(enrollmentRef);
    const enrollmentData = enrollmentSnap.data();

    document.getElementById('dashboard-title').textContent = enrollmentData.course;
    document.getElementById('dashboard-subtitle').textContent = enrollmentData.institution;
    
    await populatePeriodSwitcher(enrollmentId, enrollmentData.activePeriodId);
}

async function populatePeriodSwitcher(enrollmentId, currentActivePeriodId) {
    const user = auth.currentUser;
    if (!user) return;

    const { collection, query, orderBy, getDocs } = await import('firebase/firestore');
    const periodsRef = collection(db, 'users', user.uid, 'enrollments', enrollmentId, 'periods');
    const q = query(periodsRef, orderBy('name', 'desc'));
    const querySnapshot = await getDocs(q);

    const periodSwitcher = document.getElementById('period-switcher');
    const disciplinesList = document.getElementById('disciplines-list');
    periodSwitcher.innerHTML = '';
    if (querySnapshot.empty) {
        periodSwitcher.innerHTML = '<option>Nenhum período</option>';
        disciplinesList.innerHTML = '<p class="text-subtle col-span-full text-center">Crie um novo período para começar a adicionar disciplinas.</p>';
        activePeriodId = null;
        return;
    }

    querySnapshot.forEach(periodDoc => {
        const periodData = periodDoc.data();
        const option = document.createElement('option');
        option.value = periodDoc.id;
        option.textContent = periodData.name;
        if (periodDoc.id === currentActivePeriodId) {
            option.selected = true;
        }
        periodSwitcher.appendChild(option);
    });

    activePeriodId = periodSwitcher.value;
    renderDisciplines(enrollmentId, activePeriodId);
}

async function renderEnrollments() {
    const user = auth.currentUser;
    if (!user) return;
    const enrollmentsList = document.getElementById('enrollments-list');
    enrollmentsList.innerHTML = `<p class="text-subtle">Carregando matrículas...</p>`;
    
    const { collection, query, orderBy, getDocs } = await import('firebase/firestore');
    const enrollmentsRef = collection(db, 'users', user.uid, 'enrollments');
    const q = query(enrollmentsRef, orderBy('position', 'asc'));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
        enrollmentsList.innerHTML = `<p class="text-subtle col-span-full text-center">Nenhuma matrícula encontrada. Adicione uma para começar!</p>`;
        return;
    }

    enrollmentsList.innerHTML = '';
    querySnapshot.forEach(doc => {
        const data = doc.data();
        const card = document.createElement('div');
        card.dataset.id = doc.id;
        card.className = "relative bg-surface p-6 rounded-lg shadow-lg border border-border hover:border-primary transition-all group cursor-grab";
        card.innerHTML = `
            <div class="pr-10">
                <h4 class="text-xl font-bold text-secondary">${data.course}</h4>
                <p class="text-subtle">${data.institution}</p>
            </div>
            <div class="absolute top-4 right-4 flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <button data-id="${doc.id}" title="Editar" class="edit-btn p-2 rounded-full hover:bg-bkg"><svg class="w-5 h-5 text-subtle pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg></button>
                <button data-id="${doc.id}" title="Excluir" class="delete-btn p-2 rounded-full hover:bg-bkg"><svg class="w-5 h-5 text-danger pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg></button>
            </div>
        `;
        card.addEventListener('click', (e) => {
            if (e.target.closest('.edit-btn') || e.target.closest('.delete-btn')) return;
            showDashboard(doc.id);
        });
        enrollmentsList.appendChild(card);
    });

    if (sortable) sortable.destroy();
    sortable = new Sortable(enrollmentsList, {
        animation: 150,
        ghostClass: 'opacity-50',
        onEnd: async (evt) => {
            const items = evt.to.children;
            const { writeBatch, doc } = await import('firebase/firestore');
            const batch = writeBatch(db);
            for (let i = 0; i < items.length; i++) {
                const docId = items[i].dataset.id;
                const docRef = doc(db, 'users', user.uid, 'enrollments', docId);
                batch.update(docRef, { position: i });
            }
            await batch.commit();
        }
    });
}

async function renderDisciplines(enrollmentId, periodId) {
    const user = auth.currentUser;
    const disciplinesList = document.getElementById('disciplines-list');
    if (!user || !periodId) {
        disciplinesList.innerHTML = '<p class="text-subtle col-span-full text-center">Selecione um período para ver as disciplinas.</p>';
        return;
    }
    disciplinesList.innerHTML = `<p class="text-subtle">Carregando disciplinas...</p>`;
    
    const { collection, query, orderBy, getDocs } = await import('firebase/firestore');
    const disciplinesRef = collection(db, 'users', user.uid, 'enrollments', enrollmentId, 'periods', periodId, 'disciplines');
    const q = query(disciplinesRef, orderBy('position', 'asc'));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
        disciplinesList.innerHTML = `<p class="text-subtle col-span-full">Nenhuma disciplina adicionada a este período ainda.</p>`;
        return;
    }

    disciplinesList.innerHTML = '';
    querySnapshot.forEach(doc => {
        const data = doc.data();
        const card = document.createElement('div');
        card.dataset.id = doc.id;
        card.className = "relative bg-surface p-5 rounded-lg border border-border group flex flex-col justify-between cursor-grab";
        
        const totalClasses = (data.workload && data.hoursPerClass) ? Math.floor(data.workload / data.hoursPerClass) : 0;
        const absenceLimit = totalClasses > 0 ? Math.floor(totalClasses * 0.25) : 0;
        const currentAbsencePercentage = absenceLimit > 0 ? (((data.absences || 0) / absenceLimit) * 100) : 0;
        
        let progressBarColor = 'bg-success';
        if (currentAbsencePercentage >= 50 && currentAbsencePercentage < 100) {
            progressBarColor = 'bg-yellow-500';
        } else if (currentAbsencePercentage >= 100) {
            progressBarColor = 'bg-danger';
        }

        card.innerHTML = `
            <div>
                <div class="pr-10">
                    <h4 class="font-bold text-secondary">${data.name}</h4>
                    <p class="text-sm text-subtle">${data.teacher || 'Professor não definido'}</p>
                    <p class="text-sm text-subtle mt-2">${data.location || 'Local não definido'}</p>
                    <p class="text-xs text-primary mt-2 font-mono">${data.schedule || 'Horário não definido'}</p>
                </div>
                <div class="absolute top-4 right-4 flex flex-col space-y-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button data-id="${doc.id}" title="Editar Disciplina" class="edit-discipline-btn p-2 rounded-full hover:bg-bkg"><svg class="w-5 h-5 text-subtle pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg></button>
                    <button data-id="${doc.id}" title="Excluir Disciplina" class="delete-discipline-btn p-2 rounded-full hover:bg-bkg"><svg class="w-5 h-5 text-danger pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg></button>
                </div>
            </div>
            <div class="mt-4 pt-4 border-t border-border">
                <div class="flex justify-between items-center mb-1">
                    <span class="text-xs font-medium text-subtle">Faltas (aulas)</span>
                    <span class="text-xs font-medium text-secondary">${data.absences || 0} de ${absenceLimit} permitidas</span>
                </div>
                <div class="w-full bg-bkg rounded-full h-2.5">
                    <div class="${progressBarColor} h-2.5 rounded-full transition-all duration-300" style="width: ${currentAbsencePercentage > 100 ? 100 : currentAbsencePercentage}%"></div>
                </div>
                <div class="flex justify-between items-center mt-2">
                    <button data-id="${doc.id}" data-name="${data.name}" class="absence-history-btn text-xs text-primary hover:underline">Histórico</button>
                    <div class="flex space-x-2">
                        <button data-id="${doc.id}" class="add-absence-btn bg-primary text-bkg rounded-full w-6 h-6 flex items-center justify-center font-bold hover:opacity-80">+</button>
                    </div>
                </div>
            </div>
        `;
        disciplinesList.appendChild(card);
    });

    if (disciplineSortable) disciplineSortable.destroy();
    disciplineSortable = new Sortable(disciplinesList, {
        animation: 150,
        ghostClass: 'opacity-50',
        onEnd: async (evt) => {
            const items = evt.to.children;
            const { writeBatch, doc } = await import('firebase/firestore');
            const batch = writeBatch(db);
            for (let i = 0; i < items.length; i++) {
                const docId = items[i].dataset.id;
                const disciplineRef = doc(db, 'users', user.uid, 'enrollments', enrollmentId, 'periods', periodId, 'disciplines', docId);
                batch.update(disciplineRef, { position: i });
            }
            await batch.commit();
        }
    });
}

async function renderAbsenceHistory(enrollmentId, disciplineId) {
    const user = auth.currentUser;
    const absenceHistoryList = document.getElementById('absence-history-list');
    if (!user) return;
    absenceHistoryList.innerHTML = `<p class="text-subtle">Carregando histórico...</p>`;

    const { collection, query, orderBy, getDocs } = await import('firebase/firestore');
    const absencesRef = collection(db, 'users', user.uid, 'enrollments', enrollmentId, 'disciplines', disciplineId, 'absences');
    const q = query(absencesRef, orderBy('absenceDate', 'desc'));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
        absenceHistoryList.innerHTML = `<p class="text-subtle text-center">Nenhuma falta registrada.</p>`;
        return;
    }

    absenceHistoryList.innerHTML = `
        <div class="space-y-2">
            ${querySnapshot.docs.map(doc => {
                const data = doc.data();
                const absenceDate = new Date(data.absenceDate).toLocaleDateString('pt-BR', { timeZone: 'UTC' });
                return `
                <div class="flex items-start justify-between bg-bkg p-3 rounded-md border border-border">
                    <div>
                        <p class="font-semibold text-secondary">${absenceDate}</p>
                        <p class="text-sm text-subtle">${data.justification || 'Sem justificativa'}</p>
                    </div>
                    <button data-id="${doc.id}" class="remove-absence-btn p-1 rounded-full hover:bg-surface"><svg class="w-4 h-4 text-danger" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg></button>
                </div>
                `;
            }).join('')}
        </div>
    `;
}

// 7. LISTENERS DE EVENTOS

// --- Listeners da Tela de Autenticação (executam no início) ---
authForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = document.getElementById('auth-email').value;
    const password = document.getElementById('auth-password').value;
    try {
        if (authMode === 'login') {
            await signInWithEmailAndPassword(auth, email, password);
        } else {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const user = userCredential.user;
            await setDoc(doc(db, "users", user.uid), {
                uid: user.uid, email: user.email, name: email.split('@')[0], createdAt: new Date()
            });
        }
    } catch (error) {
        console.error("Erro de autenticação:", error);
        alert(`Erro: ${error.message}`);
    }
});

togglePasswordBtn.addEventListener('click', () => {
    const isPassword = passwordInput.type === 'password';
    passwordInput.type = isPassword ? 'text' : 'password';
    eyeIcon.classList.toggle('hidden', isPassword);
    eyeSlashIcon.classList.toggle('hidden', !isPassword);
});

// --- Função para configurar os listeners do app (executa APÓS o login) ---
function setupAppEventListeners() {
    const logoutBtn = document.getElementById('logout-btn');
    const themeToggleBtn = document.getElementById('theme-toggle-btn');
    const addEnrollmentBtn = document.getElementById('add-enrollment-btn');
    const enrollmentsList = document.getElementById('enrollments-list');
    const addEnrollmentModal = document.getElementById('add-enrollment-modal');
    const addEnrollmentForm = document.getElementById('add-enrollment-form');
    const cancelEnrollmentBtn = document.getElementById('cancel-enrollment-btn');
    const backToEnrollmentsBtn = document.getElementById('back-to-enrollments-btn');
    const addDisciplineBtn = document.getElementById('add-discipline-btn');
    const disciplinesList = document.getElementById('disciplines-list');
    const addDisciplineModal = document.getElementById('add-discipline-modal');
    const addDisciplineForm = document.getElementById('add-discipline-form');
    const cancelDisciplineBtn = document.getElementById('cancel-discipline-btn');
    const confirmDeleteModal = document.getElementById('confirm-delete-modal');
    const confirmDel